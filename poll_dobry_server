// do {
    //     for (int i = 0; i < CONNECTIONS; ++i) {
    //         poll_descriptors[i].revents = 0;
    //     }

    //     // After Ctrl-C the main socket is closed.
    //     if (finish && poll_descriptors[0].fd >= 0) {
    //         close(poll_descriptors[0].fd);
    //         poll_descriptors[0].fd = -1;
    //     }

    //     int poll_status = poll(poll_descriptors, CONNECTIONS, TIMEOUT);
    //     if (poll_status == -1 ) {
    //         if (errno == EINTR) {
    //             printf("interrupted system call\n");
    //         }
    //         else {
    //             syserr("poll");
    //         }
    //     }
    //     else if (poll_status > 0) {
    //         if ((poll_descriptors[0].revents & POLLIN)) {
    //             // New connection: new client is accepted.
    //             int client_fd = accept(poll_descriptors[0].fd,
    //                    (struct sockaddr *) &client_address,
    //                    &client_address_len);
    //             if (client_fd < 0) {
    //                 syserr("accept");
    //             }

    //             // Searching for a free slot.
    //             bool accepted = false;
    //             for (int i = 1; i < CONNECTIONS; ++i) {
    //                 if (poll_descriptors[i].fd == -1) {
    //                     printf("received new connection (%d)\n", i);
    //                     poll_descriptors[i].fd = client_fd;
    //                     poll_descriptors[i].events = POLLIN;
    //                     active_clients++;
    //                     total_clients++;
    //                     accepted = true;
    //                     break;
    //                 }
    //             }
    //             if (!accepted) {
    //                 close(client_fd);
    //                 printf("too many clients\n");
    //             }
    //             else {
    //                 char const *client_ip = inet_ntoa(client_address.sin_addr);
    //                 uint16_t client_port = ntohs(client_address.sin_port);
    //                 printf("accepted connection from %s:%" PRIu16 "\n",
    //                        client_ip, client_port);
    //             }
    //         }
    //         // Serve data connections.
    //         for (int i = 1; i < CONNECTIONS; ++i) {
    //             if (poll_descriptors[i].fd != -1 && (poll_descriptors[i].revents & (POLLIN | POLLERR))) {

    //                 ssize_t received_bytes = read(poll_descriptors[i].fd, buffer, BUFFER_SIZE);

    //                 if (received_bytes < 0) {
    //                     error("error when reading message from connection %d", i);
    //                     close(poll_descriptors[i].fd);
    //                     poll_descriptors[i].fd = -1;
    //                     active_clients--;
    //                 } else if (received_bytes == 0) {
    //                     printf("ending connection (%d)\n", i);
    //                     close(poll_descriptors[i].fd);
    //                     poll_descriptors[i].fd = -1;
    //                     active_clients--;
    //                 } else {
    //                     printf("received %zd bytes within connection (%d): '%.*s'\n",
    //                     received_bytes, i, (int) received_bytes, buffer);
    //                 }
    //             }
    //         }
    //     } else {
    //         printf("%d milliseconds passed without any events\n", TIMEOUT);
    //     }
    // } while (active_clients > 0);